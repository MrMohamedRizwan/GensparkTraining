// <auto-generated />
using System;
using FitnessTrackerAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessTrackerAPI.Migrations
{
    [DbContext(typeof(FitnessDBContext))]
    partial class FitnessDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitnessTrackerAPI.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("YearsOfExperience")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Diet.DietMeal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("CarbsGrams")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DietPlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("FatGrams")
                        .HasColumnType("integer");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProteinGrams")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DietPlanId");

                    b.ToTable("DietMeal");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Diet.DietPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<string>("DietTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("DietPlans");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.PlanAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignedByCoachId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DietPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkoutPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedByCoachId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DietPlanId");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("PlanAssignment");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Progress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<byte[]>("HashKey")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Password")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlanAssignmentId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PlanAssignmentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PlanAssignmentId1");

                    b.ToTable("Workout");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<int>("RestSeconds")
                        .HasColumnType("integer");

                    b.Property<int>("Sets")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkoutPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("WorkoutExercise");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.WorkoutPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("WorkoutPlan");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Client", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.User", "User")
                        .WithOne("Client")
                        .HasForeignKey("FitnessTrackerAPI.Models.Client", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Coach", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("FitnessTrackerAPI.Models.Coach", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Diet.DietMeal", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Diet.DietPlan", "DietPlan")
                        .WithMany("Meals")
                        .HasForeignKey("DietPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietPlan");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Diet.DietPlan", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Coach", "Coach")
                        .WithMany("DietPlans")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.PlanAssignment", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Coach", "AssignedByCoach")
                        .WithMany("AssignedPlans")
                        .HasForeignKey("AssignedByCoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FitnessTrackerAPI.Models.Client", "Client")
                        .WithMany("PlanAssignments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrackerAPI.Models.Diet.DietPlan", "DietPlan")
                        .WithMany()
                        .HasForeignKey("DietPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FitnessTrackerAPI.Models.WorkoutModel.WorkoutPlan", "WorkoutPlan")
                        .WithMany("Assignments")
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedByCoach");

                    b.Navigation("Client");

                    b.Navigation("DietPlan");

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Progress", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Client", "Client")
                        .WithMany("Progress")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.Workout", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Client", "Client")
                        .WithMany("Workouts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrackerAPI.Models.PlanAssignment", "PlanAssignment")
                        .WithMany()
                        .HasForeignKey("PlanAssignmentId1");

                    b.Navigation("Client");

                    b.Navigation("PlanAssignment");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.WorkoutExercise", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.WorkoutModel.WorkoutPlan", "WorkoutPlan")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.WorkoutPlan", b =>
                {
                    b.HasOne("FitnessTrackerAPI.Models.Coach", "Coach")
                        .WithMany("WorkoutPlans")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Client", b =>
                {
                    b.Navigation("PlanAssignments");

                    b.Navigation("Progress");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Coach", b =>
                {
                    b.Navigation("AssignedPlans");

                    b.Navigation("DietPlans");

                    b.Navigation("WorkoutPlans");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.Diet.DietPlan", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.User", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("FitnessTrackerAPI.Models.WorkoutModel.WorkoutPlan", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
